# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OAuthToken(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, refresh_token: str=None, token_type: str=None, expires_in: str=None, scopes: str=None):  # noqa: E501
        """OAuthToken - a model defined in Swagger

        :param token: The token of this OAuthToken.  # noqa: E501
        :type token: str
        :param refresh_token: The refresh_token of this OAuthToken.  # noqa: E501
        :type refresh_token: str
        :param token_type: The token_type of this OAuthToken.  # noqa: E501
        :type token_type: str
        :param expires_in: The expires_in of this OAuthToken.  # noqa: E501
        :type expires_in: str
        :param scopes: The scopes of this OAuthToken.  # noqa: E501
        :type scopes: str
        """
        self.swagger_types = {
            'token': str,
            'refresh_token': str,
            'token_type': str,
            'expires_in': str,
            'scopes': str
        }

        self.attribute_map = {
            'token': 'token',
            'refresh_token': 'refresh_token',
            'token_type': 'token_type',
            'expires_in': 'expires_in',
            'scopes': 'scopes'
        }

        self._token = token
        self._refresh_token = refresh_token
        self._token_type = token_type
        self._expires_in = expires_in
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt) -> 'OAuthToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OAuth_Token of this OAuthToken.  # noqa: E501
        :rtype: OAuthToken
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self) -> str:
        """Gets the token of this OAuthToken.


        :return: The token of this OAuthToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this OAuthToken.


        :param token: The token of this OAuthToken.
        :type token: str
        """

        self._token = token

    @property
    def refresh_token(self) -> str:
        """Gets the refresh_token of this OAuthToken.


        :return: The refresh_token of this OAuthToken.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token: str):
        """Sets the refresh_token of this OAuthToken.


        :param refresh_token: The refresh_token of this OAuthToken.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def token_type(self) -> str:
        """Gets the token_type of this OAuthToken.


        :return: The token_type of this OAuthToken.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type: str):
        """Sets the token_type of this OAuthToken.


        :param token_type: The token_type of this OAuthToken.
        :type token_type: str
        """

        self._token_type = token_type

    @property
    def expires_in(self) -> str:
        """Gets the expires_in of this OAuthToken.


        :return: The expires_in of this OAuthToken.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in: str):
        """Sets the expires_in of this OAuthToken.


        :param expires_in: The expires_in of this OAuthToken.
        :type expires_in: str
        """

        self._expires_in = expires_in

    @property
    def scopes(self) -> str:
        """Gets the scopes of this OAuthToken.


        :return: The scopes of this OAuthToken.
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes: str):
        """Sets the scopes of this OAuthToken.


        :param scopes: The scopes of this OAuthToken.
        :type scopes: str
        """

        self._scopes = scopes
